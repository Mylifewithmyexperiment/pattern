

-host entries of master and workers
 root@k8s-master:~# cat /etc/hosts
127.0.0.1       localhost
127.0.1.1       elitecore

10.121.21.85 k8s-master
10.121.21.119 node01 
10.121.21.26 node02

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

- swapoff -a               (on all nodes)
comment out  swap entry in /etc/fstab 

-service firewalld stop
systemctl disable firewalld                  (  disable firewall on all nodes)

-sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"           (download the repository on all nodes)

-kubeadm reset
apt remove kubeadm ,kubectl,kubelet
reboot
apt install kubeadm

-systemctl start docker && systemctl enable docker
systemctl start kubelet && systemctl enable kubelet

check that port is not used -6443 10250

-kubeadm init --apiserver-advertise-address <master ipaddress> --pod-network-cidr=10.244.0.0/16 appl          (on master node)
mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
save this generated token command  and apply this join command in worker node
(example:   kubeadm join 10.151.16.160:6443 --token 8z700a.2nxrqka57mtxsied     --discovery-token-ca-cert-hash sha256:a4088d8ab0f8571fa5c24881fb781139d68171ed4a7ceea461aa3de003a1c84a)

(or you can generate the token in master by this command)
kubeadm token create --print-join-command

-check pods status : kubectl get pods -o wide --namespace kube-system
( showing core-dns pod in pending state)

-apply the addon pod network of weavenet
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

-check pods now.it should be in running status

-for dashboard..apply this yml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml


-to generate the sceret
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')  
add this sceret in dashboard token

//SHORTCUT add it in .bashrc ==> alias secret="kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')"

create dashboard-adminuser.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
   
   
create dashboard-role.yaml
   apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
 
 kubectl create dashboard-role.yaml
 kubectl create dashboard-adminuser.yaml
 

Edit kubernetes-dashboard service.
kubectl -n kube-system edit service kubernetes-dashboard
Change type: ClusterIP to type: NodePort

$ kubectl -n kube-system get service kubernetes-dashboard
Dashboard has been exposed on port 31707 (HTTPS). Now you can access it from your browser at: https://<master-ip>:31707. master-ip can be found by executing kubectl cluster-info. Usually it is either 127.0.0.1 or IP of your machine, assuming that your cluster is running directly on the machine, on which these commands are executed.

(refer   https://github.com/kubernetes/dashboard/wiki/Accessing-Dashboard---1.7.X-and-above )

kubeadm join 10.121.21.85:6443 --token gg36qx.e8ixj80c6dmgqgga \
    --discovery-token-ca-cert-hash sha256:de9005e52a116c1c4df18bd3f2a10fc8a0f7c27ac5816765fcb736547a12c657 
	
	sudo vi /etc/docker/daemon.json
	
	{ "insecure-registries":["docker.sterlite.com:5043"] }
{ "ipv6" : true }

	/etc/hosts  192.168.11.238      docker.sterlite.com
	docker login docker.sterlite.com:5043 --username=crestelbuild --password=crestelbuild 





